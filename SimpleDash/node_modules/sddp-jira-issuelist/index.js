module.exports = {
    dataprovider: function() {
        return new SimpleDashJiraIssueList();
    }
};

/**
 * Data provider class to extract issue list from Atlassian Jira
 * @class SimpleDashJiraIssueList
 */
function SimpleDashJiraIssueList () {
    /**
     * Fetch data from Jira
     * @param id {String} ID of configuration section
     * @param config {Object} configuration settings
     * @param sender {Object} callback owner
     * @param callback {Object} function to callback
     * @method fetchData
     * @async
     */
    this.fetchData = function (id, config, sender, callback) {
        var ckey = "jira-issuelist";

        // 1. perform JIRA API request
        var searchRequest = require("url").parse(config[ckey]['baseUrl']);

        searchRequest.search = require("querystring").stringify({
             "jql": config[ckey]['jql'],
             "fields": config[ckey]['fields'].toLowerCase()
        });
        sr = require("url").parse(searchRequest.format());
        sr.rejectUnauthorized = false;

        function responseHandler(chartId, fields) {
            return function (res) {
                res.on('data', function (d) {
                    if (!res.xData) { res.xData = "";}
                    res.xData += d.toString();
                });
                res.on('end', function () {
                    // 2. parse response and gather statuses by category
                    var response = JSON.parse(res.xData.toString());
                    var statusMap = {};

                    var result = require("sd-core").table();

                    //var rows = [];
                    var fieldArray = fields.split(",");
                    for (var i = 0; i < response.issues.length; i++) {
                        var row = [];
                        for (var j = 0; j < fieldArray.length; j++) {
                            var key = fieldArray[j].toLowerCase();
                            result.addColumn(fieldArray[j]);
                            if (response.issues[i][key]) {
                                row[fieldArray[j]] = response.issues[i][key];
                            } else if (response.issues[i].fields && response.issues[i].fields[key] && response.issues[i].fields[key].name) {
                                row[fieldArray[j]] = response.issues[i].fields[key].name;
                            } else {
                                row[fieldArray[j]] = response.issues[i].fields[key];
                            }
                        }
                        result.addRow(row);
                    }
                    callback.apply(sender, [result]);
                });
                res.on('error', function (e) {console.error(e);})
            }
        }

        require("https").get(sr, responseHandler(id, config[ckey]['fields']));
    }
}