module.exports = {
    dataprovider: function() {
        return new SimpleDashJiraIssueStatus();
    }
};

/**
 * Data provider class to extract issue list from Atlassian Jira
 * @class SimpleDashJiraIssueList
 */
function SimpleDashJiraIssueStatus () {
    /**
     * Fetch data from Jira
     * @param id {String} ID of configuration section
     * @param config {Object} configuration settings
     * @param sender {Object} callback owner
     * @param callback {Object} function to callback
     * @method fetchData
     * @async
     */
    this.fetchData = function (id, config, sender, callback) {
        var ckey = "jira-issuestatus";

        // 1. perform JIRA API request
        var searchRequest = require("url").parse(config[ckey]['baseUrl']);

        for (var s in config[ckey]['series']) {
            searchRequest.search = require("querystring").stringify({
                "jql": config[ckey]['series'][s]['jql'],
                "fields": config[ckey]['series'][s]['fields']
            });
            sr = require("url").parse(searchRequest.format());
            sr.rejectUnauthorized = false;

            function responseHandler(s, chartId) {
                return function (res) {
                    res.on('data', function (d) {
                        if (!res.xData) { res.xData = "";}
                        res.xData += d.toString();
                    });
                    res.on('end', function () {
                        // 2. parse response and gather statuses by category
                        var response = JSON.parse(res.xData.toString());
                        var statusMap = {}, cats = [];
                        for (var i = 0; i < response.issues.length; i++) {
                            var statusName = response.issues[i].fields.status.name;
                            if (statusMap[statusName] == null) {
                                statusMap[statusName] = 0;
                                cats.push(statusName);
                            }
                            statusMap[statusName]++;
                        }
                        var result = require("sd-core").chart();
                        var series = result.add(s);
                        for (var status in statusMap) {
                            console.log({ category: status, y: statusMap[status]});
                            series.push({ category: status, y: statusMap[status]});
                        }
                        result.setCategories(cats);
                        callback.apply(sender, [result]);
                    });
                    res.on('error', function (e) {console.error(e);})
                }
            }

            require("https").get(sr, responseHandler(s, id));
        }
    }
}